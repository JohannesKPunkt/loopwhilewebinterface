<script type="text/javascript">
//<![CDATA[

current_mode = "${current_mode}"; //possible values: "interpreter", "debugger"
current_state = "stopped"; //possible values: "stopped", "running"
session_id = ${session_id};
current_tab = "terminal_container";

function switch_state(new_state)
{
    current_state = new_state;
    var icon = document.getElementById("run_button_icon");
    if(new_state == "running")
    {
        icon.setAttribute("src", "img/icons/baseline_stop_black_24dp.png");
    }
    else
    {
        icon.setAttribute("src", "img/icons/baseline_play_arrow_black_24dp.png");
    }
}

function handle_run_button()
{
	if(current_state == "stopped")
	{
		var program_code = editor.getValue();
		//TODO
		var data = new FormData();
		data.append("program_code", program_code);
		var request = new XMLHttpRequest();
		request.onreadystatechange = function()
		{
			if (this.readyState == 4 && this.status == 200)
			{
				// server is now running the program
				var id = parseInt(this.responseText, 10);
				if (isNaN(id))
				{
					alert("illegal response from server");
					session_id = 0;
				}
				else
				{
					session_id = id;
                    open_websocket();
				}
			}
			else if (this.readyState == 4)
			{
				alert("connection error " + this.status);
			}
		};
		request.open("POST", "run", true);
		request.timeout = 2000;
		request.send(data);
        switch_state("running");
		
	}
	else
	{
		stop_interpreter();
	}
}

function stop_interpreter()
{
    var data = new FormData();
    data.append("session_id", session_id);
    var requesta = new XMLHttpRequest();
    requesta.onreadystatechange = function()
    {
        if (this.readyState == 4 && this.status == 200)
        {
            if (this.responseText != "OK")
            {
                alert(this.responseText)
            }
        }
        else if (this.readyState == 4)
        {
            alert("connection error " + this.status);
        }
    };
    requesta.open("POST", "stop", true);
    requesta.timeout = 2000;
    requesta.send(data);

    session_id = 0;
    switch_state("stopped");
}

function load_debugger()
{
    var data = new FormData();
    data.append("session_id", session_id);
    var request = new XMLHttpRequest();
    request.onreadystatechange = function()
    {
        if (this.readyState == 4 && this.status == 200)
        {
            var editor_container = document.getElementById("editor_container");
            var debugger_tab = document.getElementById("debugger_placeholder");
            editor_container.setAttribute("class", "hidden");
            debugger_tab.innerHTML = this.responseText;
            debugger_tab.setAttribute("class", "visible");
            current_mode = "debugger";
            current_state = "stopped";
            active_line = "";
        }

    };
    request.open("POST", "debugger", true);
    request.timeout = 2000;
    request.send(data);
}

function handle_debug_button()
{
    if (current_state == "running")
    {
        stop_interpreter();
    }

    var data = new FormData();
    data.append("program_code", editor.getValue());
    var request = new XMLHttpRequest();
    request.onreadystatechange = function()
    {
        if (this.readyState == 4 && this.status == 200)
        {
            var pos = this.responseText.indexOf(",");
            var response = this.responseText.substring(0, pos);
            var payload = this.responseText.substring(pos+1, this.responseText.length);

            if (response == "OK")
            {
                session_id = payload;
                load_debugger();
            }
            else
            {
                terminal_add_text(payload);
            }
        }

    };
    request.open("POST", "start_debug_session", true);
    request.timeout = 2000;
    request.send(data);
}

function handle_debug_close_button()
{
    var editor_container = document.getElementById("editor_container");
    var debugger_tab = document.getElementById("debugger_placeholder");
    editor_container.setAttribute("class", "visible");
    debugger_tab.innerHTML = this.responseText;
    debugger_tab.setAttribute("class", "hidden");

    current_mode = "interpreter";
    current_state = "stopped";

    if(current_tab != "terminal_container")
    {
        switch_tab("terminal_container");
    }

    var sess_id_save = session_id;
    websocket.close();
    session_id = sess_id_save;
    handle_action("close");
    session_id = 0;
}

function breakpoint_action(id)
{
    var elem = document.getElementById(id);
    if (elem.getAttribute("src") == "/img/transparentdot.png")
    {
        var data = new FormData();
        data.append("session_id", session_id);
        data.append("line_no", id.slice(3));
        var requesta = new XMLHttpRequest();
        requesta.onreadystatechange = function()
        {
            if (this.readyState == 4 && this.status == 200)
            {
                if (this.responseText == "OK")
                {
                    elem.setAttribute("src", "/img/reddot.png");
                }
            }
            
        };
        requesta.open("POST", "set_breakpoint", true);
        requesta.timeout = 2000;
        requesta.send(data);
     }
     else
     {
        var data = new FormData();
        data.append("session_id", session_id);
        data.append("line_no", id.slice(3));
        var requesta = new XMLHttpRequest();
        requesta.open("POST", "remove_breakpoint", true);
        requesta.timeout = 2000;
        requesta.send(data);
        elem.setAttribute("src", "/img/transparentdot.png");
     }
}


function open_websocket()
{
    websocket = new WebSocket("${ws_host}");
    websocket.onopen = function() {
        websocket.send(session_id);
    }
    websocket.onerror = function(error) {
        session_id = 0;
        if(current_mode == "interpreter")
        {
            switch_state("stopped");
        }
    }
    websocket.onmessage=function(e) {
        var result = JSON.parse(e.data);
        process_update(result);
    }
    websocket.onclose = function() {
        if(current_mode == "interpreter")
        {
            session_id = 0;
            switch_state("stopped");
        }
        else if(current_state != "stopped")
        {
            open_websocket();
        }
    }
}

function process_update(result)
{
    if(result["status"] == "timeout")
    {
        alert("Session timeout - Die maximale Sitzungsdauer (1 Minute im Interpretermodus bzw. 15 Minuten im Debuggermodus)"
            + " wurde Ã¼berschritten.\nBitte starten Sie das Programm neu.");
    }
    if(result["terminal"] != "")
    {
        terminal_add_text(result["terminal"]);
    }

    if(current_mode == "debugger" && result["debugger"] != "")
    {
        var response = result["debugger"];
        if(response == "FAIL" || response == "DIED"
           || response == "RESTARTED")
        {
            if(active_line != "")
            {
                var elem = document.getElementById(active_line);
                elem.setAttribute("class", "debuggerCodeViewLine");
                active_line = ""
            }

            if(current_tab != "terminal_container")
            {
                switch_tab("terminal_container");
            }
            current_state = "stopped";
        }
        else if(response != "None")
        {
            if(active_line != "")
            {
                var elem = document.getElementById(active_line);
                elem.setAttribute("class", "debuggerCodeViewLine");
            }
            var strace = JSON.parse(response);
            var line = strace[0]["line"];
            var elem = document.getElementById("line" + line);
            elem.setAttribute("class", "debuggerCodeViewLineActive");
            active_line = "line" + line;

            var codeView = document.getElementById("debuggerCodeView");
            // only scroll to active line if it is not visible
            if(codeView.scrollTop > elem.offsetTop ||
               codeView.scrollTop + codeView.offsetHeight < elem.offsetTop)
            {
                elem.scrollIntoView();
            }

            // remove old table
            var table_node = document.getElementById("debugger_varview");
            table_node.remove();
            // create new table node
            var varview_cont = document.getElementById("debugger_varview_container");
            table_node = document.createElement("table");
            table_node.setAttribute("id", "debugger_varview");
            varview_cont.appendChild(table_node);
            for(var frame_id in strace)
            {
                var frame = strace[frame_id];
                var tr = document.createElement("tr");
                var td = document.createElement("td");
                tr.appendChild(td);
                var macro_b = document.createElement("b");
                macro_b.appendChild(document.createTextNode("macro"));
                td.appendChild(macro_b);
                var text = document.createTextNode(" " + frame["macro"]);
                td.appendChild(text);

                table_node.appendChild(tr);
                for(var binding_id in frame["bindings"])
                {
                    var binding = frame["bindings"][binding_id];
                    var tr = document.createElement("tr");
                    var td = document.createElement("td");
                    tr.appendChild(td);
                    var text = document.createTextNode("\u00A0\u00A0" + binding["VarType"] + " " + binding["Ident"] + ": " + binding["Val"]);
                    td.appendChild(text);
                    table_node.appendChild(tr);
                }
            }

            if(current_tab != "debugger_varview_container")
            {
                switch_tab("debugger_varview_container");
            }
        }
    }
}


function switch_tab(tabname)
{
    var oldtab = document.getElementById(current_tab);
    current_tab = tabname;
    var newtab = document.getElementById(current_tab);
    oldtab.setAttribute("class", "tabframe hidden");
    newtab.setAttribute("class", "tabframe visible");
}

function handle_continue_button()
{
    handle_action("continue");
    if (current_state == "stopped")
    {
        current_state = "running";
        open_websocket();
    }
}

function handle_step_action(action)
{
    if (current_state == "stopped")
    {
        current_state = "running";
        handle_action("start");
        open_websocket();
    }
    else
    {
        handle_action(action);
    }
}

function handle_step_over_button()
{
    handle_step_action("stepover");
}

function handle_step_into_button()
{
    handle_step_action("stepinto");
}

function handle_step_out_button()
{
    handle_step_action("stepout");
}

function handle_action(action)
{
    var data = new FormData();
	data.append("session_id", session_id);
	data.append("action", action);
	var request = new XMLHttpRequest();
	request.onreadystatechange = function()
	{
	};
	request.open("POST", "debugger_action", true);
	request.timeout = 2000;
	request.send(data);
}

var input_file_field = document.createElement("input");
input_file_field.setAttribute("type", "file");

function open_file(event)
{
    var file = event.target.files[0];
    var reader = new FileReader();

    reader.onloadend = function(evt)
    {
        set_editor_text(evt.target.result);
    }
    reader.readAsText(file);
}
input_file_field.addEventListener("change", open_file, false);

function handle_open_file()
{
    input_file_field.click();
}

function handle_save_file()
{
    var link = document.createElement("a");
    link.setAttribute("href", "data:text/plain;charset=utf-8,"
        + encodeURIComponent(editor.getValue()));
    link.setAttribute("download", "program.lw");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

function set_editor_text(text)
{
    if(current_mode == "interpreter")
    {
        editor.setValue(text);
        editor.clearSelection();
    }
    else
    {
        alert("You have to switch back to interpreter mode!");
    }
}
//]]>
</script>
